#include <talkie.h> //음성출력 라이브러리
//USB 호스트 쉴드 라이브러리
#include <usbhid.h>
#include <usbhub.h>
#include <hiduniversal.h>
#include <hidboot.h>
#include <SPI.h> //USB SPI통신 이용

#include <string.h> //바코드 비교를 위한 라이브러리

Talkie voice; 
//음성데이터 16진수로 저장
const uint8_t chilsung[] PROGMEM = {0x00, 0x00, 0x40, 0x80, 0x2e, 0xc5, 0x1a, 0x55, 0x39, 0xc7, 0xb4, 0x39, 0x3e, 0x8c, 0x56, 0xb1, 0x1d, 0x9a, 0xf6, 0x30, 0x81, 0xcb, 0x76, 0xa9, 0xbb, 0xc3, 0x1a, 0x19, 0xd7, 0x21, 0xe9, 0x0a, 0xcf, 0x6c, 0xcf, 0x98, 0x26, 0x71, 0x6c, 0x97, 0x2a, 0x2e, 0xea, 0x18, 0x01, 0x8d, 0x8b, 0x34, 0x4a, 0xa6, 0x2a, 0x33, 0x4d, 0x73, 0x18, 0x9f, 0xa3, 0xcc, 0xd4, 0xcd, 0x61, 0x75, 0xb5, 0x74, 0x51, 0xb7, 0x85, 0x83, 0xcf, 0x32, 0xdd, 0xd3, 0x06, 0x1e, 0x7c, 0x0f, 0x4f, 0x6f, 0x93, 0x78, 0xf0, 0xa3, 0xdd, 0x3d, 0x69, 0x10, 0x61, 0xeb, 0x9e, 0x34, 0xb9, 0x4e, 0x6c, 0x52, 0x25, 0x5d, 0xed, 0x10, 0xa0, 0x7b, 0xb6, 0x25, 0x68, 0x65, 0x93, 0x61, 0x49, 0x8f, 0x28, 0xb5, 0x4f, 0xb8, 0xa4, 0x3d, 0xb2, 0xb0, 0x31, 0xaa, 0xd2, 0x76, 0xe9, 0x4c, 0xc5, 0x96, 0x70, 0x96, 0x61, 0x31, 0xd1, 0x3b, 0x86, 0x49, 0x9a, 0x0f, 0xf4, 0x6c, 0x33, 0xc6, 0x51, 0x1e, 0x88, 0x3b, 0x46, 0xe2, 0x24, 0xc4, 0x49, 0x92, 0x87, 0xb2, 0xd5, 0x13, 0x07, 0xa9, 0xe9, 0x4c, 0xf1, 0x4e, 0x16, 0x95, 0x85, 0x0a, 0xd6, 0x3d, 0x45, 0xb2, 0x16, 0x2a, 0xe4, 0xf4, 0xa8, 0xd5, 0x9a, 0xb9, 0xa1, 0xdc, 0x65, 0x94, 0x18, 0x16, 0x8e, 0x74, 0x04, 0x50, 0x6a, 0x38, 0x01, 0x4a, 0x37, 0x67, 0x7d, 0xce, 0xa8, 0xce, 0x6c, 0x15, 0x00, 0x1e, 0xff};
const uint8_t coke[] PROGMEM = {0x00, 0x08, 0x88, 0x5b, 0xdd, 0x00, 0xb1, 0x86, 0x2f, 0x4a, 0x4d, 0xb2, 0xac, 0xaa, 0xd3, 0x28, 0xb7, 0x21, 0xbb, 0x33, 0x32, 0xa3, 0xc5, 0xc2, 0xa8, 0xca, 0x58, 0x88, 0x81, 0xd9, 0xd9, 0xcd, 0x63, 0x31, 0xa0, 0x24, 0x2a, 0x03, 0x14, 0x8f, 0x76, 0x68, 0xeb, 0xa4, 0xb3, 0x25, 0xe9, 0xa1, 0x5d, 0xd0, 0x0a, 0xe7, 0x76, 0x89, 0x13, 0x41, 0xa6, 0x82, 0xdb, 0x32, 0x56, 0x04, 0xab, 0x4a, 0x75, 0x82, 0x38, 0xa8, 0xc5, 0x32, 0xc2, 0x32, 0x01, 0x42, 0x96, 0x50, 0x40, 0x4a, 0xa2, 0x8b, 0x77, 0x46, 0x2d, 0x37, 0x92, 0x2e, 0x9e, 0x85, 0xe8, 0x6a, 0x93, 0xbb, 0x04, 0x1a, 0x6a, 0x2a, 0xd8, 0x59, 0x93, 0x51, 0xaa, 0x6e, 0x43, 0x67, 0xc5, 0x04, 0xa5, 0xbb, 0x4d, 0xa3, 0x0c, 0x0f, 0x98, 0xee, 0x72, 0x5e, 0x7c, 0x62, 0xa1, 0x3c, 0x4c, 0x74, 0xe9, 0xc9, 0x8c, 0x35, 0x13, 0xb2, 0x7a, 0x2b, 0xf7, 0xce, 0xcc, 0x48, 0xe2, 0x2d, 0x35, 0x7a, 0x13, 0x67, 0x8a, 0x57, 0xdc, 0x1c, 0x4d, 0x92, 0xc9, 0x2e, 0x02, 0x6a, 0x55, 0x61, 0x69, 0x4c, 0x24, 0x46, 0x6a, 0x07, 0x00, 0xe0, 0xff};
const uint8_t zero_coke[] PROGMEM = {0x00, 0x00, 0x06, 0xf3, 0x4d, 0xc3, 0x2d, 0x22, 0x19, 0x20, 0xf6, 0xf0, 0x45, 0xa9, 0xc9, 0x1a, 0x53, 0xb1, 0x1b, 0xe5, 0x0f, 0x44, 0x77, 0x46, 0x16, 0x9c, 0x5c, 0x90, 0x5d, 0x59, 0x05, 0x31, 0xac, 0x0a, 0x46, 0x66, 0x2c, 0x04, 0xd4, 0xc2, 0x61, 0x80, 0x1c, 0xc8, 0x0e, 0x6d, 0x82, 0x55, 0x04, 0xa7, 0x3d, 0xb4, 0xcf, 0x5a, 0x66, 0xdc, 0xb6, 0x70, 0x32, 0x49, 0x87, 0xf1, 0x1a, 0xc6, 0xf2, 0x62, 0x95, 0xa6, 0x69, 0x10, 0x07, 0x8c, 0x59, 0xba, 0x5b, 0x66, 0x40, 0x1a, 0x1c, 0x0a, 0x48, 0x59, 0x64, 0x71, 0x2c, 0x46, 0x66, 0x99, 0xdd, 0xc3, 0x89, 0x10, 0xe5, 0x41, 0xc9, 0x16, 0xcf, 0x63, 0x8c, 0x07, 0xbb, 0x1b, 0x3c, 0x29, 0x35, 0x6e, 0xdc, 0xee, 0xf0, 0x32, 0x46, 0x9b, 0x72, 0xdb, 0x23, 0xf8, 0x14, 0x25, 0x42, 0x49, 0x8f, 0xe0, 0x63, 0x14, 0x2b, 0xa7, 0x1d, 0x22, 0x0f, 0xd1, 0xaa, 0xd2, 0xd6, 0x28, 0xa0, 0x4f, 0x85, 0x68, 0x92, 0xa0, 0x34, 0xe6, 0xea, 0xaa, 0x89, 0x09, 0x30, 0x8c, 0x18, 0x03, 0xa6, 0x17, 0x69, 0x0e, 0x17, 0xbe, 0x13, 0x94, 0x74, 0xb9, 0xc8, 0xd4, 0x94, 0x52, 0x93, 0xe1, 0x03, 0x5b, 0x93, 0x46, 0x49, 0x86, 0xeb, 0x99, 0x78, 0x97, 0xc4, 0x1d, 0x09, 0xd1, 0x96, 0x95, 0x92, 0x74, 0x64, 0xd4, 0x85, 0x5a, 0x4a, 0xda, 0x96, 0xf3, 0xa4, 0xe4, 0xa3, 0x6e, 0x8a, 0x6c, 0xaa, 0x42, 0x8c, 0xa8, 0x09, 0xae, 0x2b, 0x01, 0x32, 0xc2, 0xd6, 0x04, 0x3e, 0x35, 0xf0, 0x88, 0x12, 0x11, 0xc4, 0x1e, 0xa0, 0xc5, 0x96, 0x51, 0x2c, 0xb2, 0x82, 0xb9, 0xd9, 0x06, 0x80, 0xff};
const uint8_t pocari[] PROGMEM = {0x00, 0x00, 0x02, 0x08, 0x45, 0x75, 0xd1, 0xb6, 0x18, 0x47, 0xa5, 0x9d, 0x45, 0xbb, 0x83, 0xd2, 0x9d, 0xb6, 0x02, 0xeb, 0x2f, 0xf8, 0xb6, 0xa7, 0x22, 0x9c, 0x59, 0xa4, 0x91, 0x66, 0x1b, 0x10, 0x50, 0x32, 0xb5, 0x03, 0xb2, 0x23, 0x3b, 0x8c, 0xb7, 0x56, 0x61, 0x9a, 0xec, 0x30, 0x3e, 0x46, 0x8a, 0x6a, 0xdb, 0xc3, 0xd8, 0x54, 0xc9, 0x6a, 0x6d, 0x0a, 0x8f, 0x4b, 0x8f, 0xbb, 0x35, 0x19, 0xac, 0x50, 0x7d, 0xe5, 0xbc, 0xad, 0xb1, 0xcc, 0xf4, 0xb5, 0xd3, 0xde, 0xc6, 0xe1, 0xbc, 0x97, 0xc6, 0x6d, 0x83, 0xc0, 0x74, 0xed, 0x84, 0xd9, 0x31, 0xf2, 0x50, 0xa2, 0xae, 0x12, 0xcb, 0x88, 0x5d, 0x88, 0x98, 0xb3, 0x1d, 0x40, 0x40, 0x37, 0xa6, 0x89, 0xe3, 0x26, 0x7a, 0x47, 0x65, 0x2f, 0x9e, 0xc6, 0x98, 0x4a, 0x56, 0xba, 0x04, 0x1e, 0x63, 0x4c, 0xd9, 0xe9, 0x12, 0x85, 0xad, 0x09, 0x43, 0xb7, 0x4b, 0x12, 0x26, 0x36, 0x0d, 0xdd, 0x36, 0x99, 0xba, 0x9e, 0x10, 0x72, 0x6a, 0x0c, 0xe4, 0x6b, 0x83, 0x39, 0x1e, 0xd2, 0x40, 0xec, 0x49, 0x61, 0xc7, 0x00, 0x00, 0x80, 0x80, 0xa2, 0xd4, 0x04, 0xd0, 0x2c, 0x69, 0x8b, 0xb2, 0x44, 0xcd, 0xd2, 0x38, 0x23, 0x06, 0x3a, 0xa6, 0x9c, 0xeb, 0xac, 0x8c, 0x18, 0xab, 0x34, 0x6e, 0x32, 0x72, 0x64, 0xa3, 0x22, 0x38, 0x6e, 0x53, 0xa0, 0x8b, 0xca, 0xa0, 0x38, 0xd9, 0x50, 0x3e, 0x51, 0x9e, 0xdd, 0x12, 0x17, 0xc5, 0xc0, 0x46, 0x66, 0x68, 0x52, 0x00, 0x78, 0xff};
const uint8_t hot6[] PROGMEM = {0x00, 0x00, 0x60, 0x80, 0x16, 0x3d, 0x0e, 0x9d, 0xb4, 0x7a, 0x68, 0x34, 0x3d, 0xb4, 0xb7, 0x5e, 0xae, 0x92, 0xf6, 0x30, 0xd6, 0x7b, 0xb9, 0x49, 0xd3, 0xc6, 0x35, 0x21, 0xea, 0xe1, 0xb1, 0x09, 0xb0, 0xbc, 0x0b, 0x02, 0xb6, 0x77, 0xc1, 0x00, 0x01, 0xb6, 0x0f, 0x1d, 0x74, 0x64, 0x3a, 0x9b, 0x1a, 0x67, 0xd1, 0x52, 0xd7, 0x85, 0x69, 0xdb, 0xc0, 0x33, 0x5b, 0xe7, 0x26, 0x6d, 0x12, 0x53, 0x14, 0xbb, 0xb9, 0x5a, 0x61, 0x40, 0x0f, 0x62, 0x08, 0xe8, 0x46, 0x15, 0x01, 0xc3, 0x99, 0x00, 0x02, 0xba, 0x36, 0x4d, 0x42, 0x50, 0x5c, 0x13, 0xe6, 0xf4, 0x08, 0xda, 0xda, 0x44, 0x60, 0x92, 0x23, 0xca, 0x10, 0x63, 0x46, 0x89, 0x97, 0xc4, 0xb3, 0x8f, 0x19, 0x26, 0x1d, 0x1a, 0xab, 0xde, 0xae, 0xe4, 0xb8, 0x59, 0x34, 0x5a, 0x67, 0x60, 0xec, 0x12, 0xa1, 0x18, 0x19, 0x85, 0x89, 0x5d, 0x0c, 0x52, 0x64, 0x04, 0x27, 0x16, 0x3e, 0x32, 0x66, 0x55, 0x12, 0x17, 0x25, 0xc0, 0x99, 0xa7, 0xb9, 0x13, 0x80, 0xff};
const uint8_t fishsnack[] PROGMEM = {0x00, 0x00, 0x08, 0xe8, 0x42, 0x84, 0x00, 0x4d, 0xa9, 0x2b, 0x60, 0x78, 0x8a, 0xc3, 0x58, 0x65, 0x5b, 0xa1, 0xf6, 0x0e, 0xc3, 0x63, 0xb4, 0x9b, 0x24, 0x3d, 0x2c, 0x59, 0x51, 0x61, 0x9a, 0xb6, 0xb1, 0xf0, 0x5b, 0x54, 0x8a, 0xdb, 0xc2, 0xc2, 0xaf, 0xde, 0x1d, 0xb1, 0x33, 0x27, 0x78, 0xb4, 0xdd, 0x22, 0x3c, 0x29, 0x12, 0x60, 0x9a, 0xc8, 0x30, 0x2b, 0x00, 0x90, 0xec, 0xe2, 0xd9, 0x43, 0xd4, 0xee, 0xf1, 0x45, 0xd0, 0x74, 0xd1, 0x26, 0x27, 0x36, 0x41, 0xdd, 0x84, 0xeb, 0x9e, 0x4c, 0x04, 0x71, 0x53, 0x4d, 0xbb, 0x32, 0x1c, 0x24, 0xc2, 0x35, 0x59, 0xc9, 0x41, 0x94, 0x3a, 0xb3, 0xa8, 0x2e, 0x07, 0x2f, 0xbc, 0x51, 0xe4, 0xda, 0x5c, 0x65, 0x60, 0x95, 0x0d, 0xbb, 0x1d, 0x16, 0xe0, 0xa4, 0x56, 0x14, 0x49, 0x91, 0x06, 0xac, 0x73, 0x98, 0x26, 0x01, 0x00, 0x80, 0xff};

void bar_voice();
char bar_data[50]; //바코드 값 저장할 배열
int i = 0;
void save_data(char data);
class MyParser : public HIDReportParser {
  public:
    MyParser();
    void Parse(USBHID *hid, bool is_rpt_id, uint8_t len, uint8_t *buf);
  protected:
    uint8_t KeyToAscii(bool upper, uint8_t mod, uint8_t key);
    virtual void OnKeyScanned(bool upper, uint8_t mod, uint8_t key);
    virtual void OnScanFinished();
};

MyParser::MyParser() {}

void MyParser::Parse(USBHID *hid, bool is_rpt_id, uint8_t len, uint8_t *buf) {
  // If error or empty, return
  if (buf[2] == 1 || buf[2] == 0) return;

  for (uint8_t i = 7; i >= 2; i--) {
    // If empty, skip
    if (buf[i] == 0) continue;

    // If enter signal emitted, scan finished
    if (buf[i] == UHS_HID_BOOT_KEY_ENTER) {
      OnScanFinished();
    }

    // If not, continue normally
    else {
      // If bit position not in 2, it's uppercase words
      OnKeyScanned(i > 2, buf, buf[i]);
    }

    return;
  }
}

uint8_t MyParser::KeyToAscii(bool upper, uint8_t mod, uint8_t key) {
  // Letters
  if (VALUE_WITHIN(key, 0x04, 0x1d)) {
    if (upper) return (key - 4 + 'A');
    else return (key - 4 + 'a');
  }

  // Numbers
  else if (VALUE_WITHIN(key, 0x1e, 0x27)) {
    return ((key == UHS_HID_BOOT_KEY_ZERO) ? '0' : key - 0x1e + '1');
  }

  return 0;
}

void MyParser::OnKeyScanned(bool upper, uint8_t mod, uint8_t key) {
  uint8_t ascii = KeyToAscii(upper, mod, key);
  Serial.print((char)ascii);
  char bar_code = (char)ascii;
  save_data(bar_code);
}

void MyParser::OnScanFinished() {
  bar_data[i] = '\0'; //널문자 추가
  Serial.println(" - Finished");
  bar_voice();
  i = 0;
  
}
void bar_voice() //음성출력
{
  if(strcmp(bar_data,"1234567890128")==0){ //칠성사이다
    voice.say(chilsung);
    delay(500);
    voice.say(chilsung);
  }
  else if(strcmp(bar_data,"1234567890158")==0){ //코카콜라
    voice.say(coke);
    delay(500);
    voice.say(coke);
  }
  else if(strcmp(bar_data,"8809612842280")==0){ //코카콜라 제로
    voice.say(zero_coke);
    delay(500);
    voice.say(zero_coke);
  }
  else if(strcmp(bar_data,"8801056836016")==0){ //포카리스웨트
    voice.say(pocari);
    delay(500);
    voice.say(pocari);
  }
  else if(strcmp(bar_data,"1234567890128")==0){ //핫식스
    voice.say(hot6);
    delay(500);
    voice.say(hot6);
  }
  else if(strcmp(bar_data,"8809482500013")==0){ //새우깡
    voice.say(fishsnack);
    delay(500);
    voice.say(fishsnack);
  }
}

USB          Usb;
USBHub       Hub(&Usb);
HIDUniversal Hid(&Usb);
MyParser     Parser;

void setup() {
  Serial.begin( 115200 );
  Serial.println("Start");

  if (Usb.Init() == -1) {
    Serial.println("OSC did not start.");
  }

  delay( 200 );

  Hid.SetReportParser(0, &Parser);
}
void save_data(char data) //바코드 데이터 배열형식으로 저장
{
  bar_data[i] = data;
  i++;
}

void loop() {
  Usb.Task();
}
